# Generated by Django 4.2 on 2025-09-18 06:57

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('member_id', models.CharField(max_length=50, unique=True)),
                ('role', models.CharField(choices=[('customer', 'Customer'), ('store_manager', 'Store Manager'), ('admin', 'Admin'), ('terminal', 'Terminal')], default='customer', max_length=20)),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('last_login_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=20)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('avatar', models.URLField(blank=True)),
                ('is_2fa_enabled', models.BooleanField(default=False)),
                ('two_factor_secret', models.CharField(blank=True, max_length=32)),
                ('backup_codes', models.JSONField(blank=True, default=list)),
                ('failed_login_attempts', models.IntegerField(default=0)),
                ('locked_until', models.DateTimeField(blank=True, null=True)),
                ('last_failed_login', models.DateTimeField(blank=True, null=True)),
                ('suspicious_activity_count', models.IntegerField(default=0)),
                ('rank', models.CharField(choices=[('bronze', 'ブロンズ'), ('silver', 'シルバー'), ('gold', 'ゴールド'), ('platinum', 'プラチナ'), ('diamond', 'ダイヤモンド')], default='bronze', max_length=20)),
                ('display_name', models.CharField(blank=True, max_length=100)),
                ('melty_user_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('melty_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('melty_connected_at', models.DateTimeField(blank=True, null=True)),
                ('is_melty_linked', models.BooleanField(default=False)),
                ('melty_profile_data', models.JSONField(blank=True, default=dict)),
                ('registration_source', models.CharField(choices=[('direct', 'Direct biid registration'), ('melty', 'Melty app referral'), ('social', 'Social media'), ('store', 'Store referral')], default='direct', max_length=20)),
                ('selected_social_skin', models.CharField(blank=True, choices=[('classic', 'Classic'), ('modern', 'Modern'), ('casual', 'Casual')], help_text="User's selected social profile theme", max_length=20, null=True)),
                ('bio', models.TextField(blank=True, help_text="User's self-introduction", max_length=500)),
                ('birth_date', models.DateField(blank=True, help_text="User's birth date", null=True)),
                ('gender', models.CharField(choices=[('male', '男性'), ('female', '女性'), ('other', 'その他'), ('private', '非公開')], default='private', help_text="User's gender", max_length=10)),
                ('website', models.URLField(blank=True, help_text="User's personal website or blog")),
                ('friends_count', models.IntegerField(default=0, help_text='Number of friends this user has')),
                ('posts_count', models.IntegerField(default=0, help_text='Number of social posts by this user')),
                ('reviews_count', models.IntegerField(default=0, help_text='Number of reviews posted by this user')),
                ('profile_visibility', models.CharField(choices=[('private', '非公開'), ('friends', 'フレンドのみ'), ('limited', '制限公開'), ('public', '完全公開')], default='private', help_text='Overall profile visibility setting', max_length=20)),
                ('show_online_status', models.BooleanField(default=False, help_text='Show online/offline status to friends')),
                ('last_active_at', models.DateTimeField(blank=True, help_text='Last time user was active on social features', null=True)),
                ('receipt_email', models.EmailField(blank=True, help_text='Email address for receipt delivery (can be different from login email)', max_length=254, null=True)),
                ('receipt_delivery_preference', models.CharField(choices=[('email_only', 'Email Only'), ('app_only', 'App Only'), ('both', 'Email + App'), ('none', 'No Receipt')], default='email_only', max_length=20)),
                ('auto_receipt_email', models.BooleanField(default=True, help_text='Automatically send receipt emails after payment')),
                ('payment_history_retention_days', models.IntegerField(default=365, help_text='Days to retain payment history in app')),
                ('preferred_payment_method', models.CharField(blank=True, choices=[('qr', 'QR Code'), ('nfc', 'NFC'), ('manual', 'Manual Entry')], max_length=20, null=True)),
                ('unlocked_social_skins', models.JSONField(default=list, help_text='List of unlocked social skin themes')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.CharField(choices=[('bronze', 'ブロンズ'), ('silver', 'シルバー'), ('gold', 'ゴールド'), ('platinum', 'プラチナ'), ('diamond', 'ダイヤモンド')], max_length=20, unique=True)),
                ('required_points', models.IntegerField()),
                ('required_transactions', models.IntegerField(default=0)),
                ('point_multiplier', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('privileges', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['required_points'],
            },
        ),
        migrations.CreateModel(
            name='APIAccessKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=40, unique=True)),
                ('partner_name', models.CharField(max_length=255)),
                ('shared_secret', models.CharField(max_length=255)),
                ('hash_algorithm', models.CharField(default='SHA1', max_length=10)),
                ('time_step', models.IntegerField(default=30)),
                ('totp_digits', models.IntegerField(default=6)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('display_order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'エリア',
                'verbose_name_plural': 'エリア',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='BlogTheme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('primary_color', models.CharField(default='#ec4899', max_length=7)),
                ('secondary_color', models.CharField(default='#f43f5e', max_length=7)),
                ('accent_color', models.CharField(default='#8b5cf6', max_length=7)),
                ('background_color', models.CharField(default='#fdf2f8', max_length=7)),
                ('text_color', models.CharField(default='#1f2937', max_length=7)),
                ('font_family', models.CharField(default='Inter, sans-serif', max_length=255)),
                ('font_size_base', models.CharField(default='16px', max_length=10)),
                ('layout_type', models.CharField(choices=[('default', 'デフォルト'), ('sidebar', 'サイドバー'), ('grid', 'グリッド'), ('magazine', 'マガジン')], default='default', max_length=20)),
                ('custom_css', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_premium', models.BooleanField(default=False)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('logo_url', models.URLField(blank=True)),
                ('allowed_prices', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DepositTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(max_length=100, unique=True)),
                ('transaction_type', models.CharField(choices=[('charge', 'チャージ'), ('consumption', '消費'), ('refund', '返金'), ('auto_charge', '自動チャージ'), ('bonus', 'ボーナス'), ('penalty', 'ペナルティ')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('balance_before', models.DecimalField(decimal_places=2, max_digits=10)),
                ('balance_after', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(blank=True, choices=[('credit_card', 'クレジットカード'), ('bank_transfer', '銀行振込'), ('convenience_store', 'コンビニ決済'), ('digital_wallet', 'デジタルウォレット'), ('system', 'システム処理')], max_length=20, null=True)),
                ('payment_reference', models.CharField(blank=True, max_length=255)),
                ('status', models.CharField(choices=[('pending', '処理中'), ('completed', '完了'), ('failed', '失敗'), ('cancelled', 'キャンセル'), ('refunded', '返金済み')], default='pending', max_length=20)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('fee_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('fee_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('related_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.deposittransaction')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DigitalGiftBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('logo_url', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('supported_prices', models.JSONField(default=list)),
                ('min_price', models.IntegerField(default=100)),
                ('max_price', models.IntegerField(default=50000)),
                ('commission_rate', models.DecimalField(decimal_places=2, default=5.0, max_digits=5)),
                ('commission_tax_rate', models.DecimalField(decimal_places=2, default=10.0, max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DigitalGiftPurchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gift_code', models.CharField(max_length=100, unique=True)),
                ('gift_url', models.URLField()),
                ('price', models.IntegerField()),
                ('points_used', models.IntegerField()),
                ('commission', models.IntegerField(default=0)),
                ('commission_tax', models.IntegerField(default=0)),
                ('total_cost', models.IntegerField()),
                ('status', models.CharField(choices=[('pending', '処理中'), ('completed', '完了'), ('failed', '失敗'), ('expired', '期限切れ'), ('used', '使用済み')], default='pending', max_length=20)),
                ('expire_at', models.DateTimeField()),
                ('purchased_at', models.DateTimeField(auto_now_add=True)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('partner_request_id', models.CharField(max_length=40)),
                ('partner_response', models.JSONField(default=dict)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.digitalgiftbrand')),
            ],
            options={
                'ordering': ['-purchased_at'],
            },
        ),
        migrations.CreateModel(
            name='ECPointRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_type', models.CharField(choices=[('webhook', 'Webhook'), ('receipt', 'Receipt')], max_length=20, verbose_name='申請方式')),
                ('purchase_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='購入金額')),
                ('order_id', models.CharField(max_length=100, verbose_name='注文ID')),
                ('purchase_date', models.DateTimeField(verbose_name='購入日時')),
                ('receipt_image', models.ImageField(blank=True, null=True, upload_to='receipts/', verbose_name='レシート画像')),
                ('receipt_description', models.TextField(blank=True, verbose_name='レシート詳細')),
                ('status', models.CharField(choices=[('pending', '店舗承認待ち'), ('approved', '承認済み'), ('rejected', '拒否済み'), ('completed', 'ポイント付与完了'), ('failed', '処理失敗')], default='pending', max_length=20, verbose_name='処理状況')),
                ('points_to_award', models.IntegerField(verbose_name='付与予定ポイント')),
                ('points_awarded', models.IntegerField(default=0, verbose_name='実付与ポイント')),
                ('store_approved_at', models.DateTimeField(blank=True, null=True, verbose_name='店舗承認日時')),
                ('rejection_reason', models.TextField(blank=True, verbose_name='拒否理由')),
                ('payment_method', models.CharField(blank=True, choices=[('card_payment', 'クレジット決済'), ('deposit_consumption', 'デポジット消費')], max_length=20, verbose_name='支払い方法')),
                ('payment_reference', models.CharField(blank=True, max_length=100, verbose_name='決済参照ID')),
                ('request_hash', models.CharField(max_length=64, unique=True, verbose_name='リクエストハッシュ')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IPアドレス')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完了日時')),
                ('deposit_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.deposittransaction', verbose_name='デポジット取引')),
            ],
            options={
                'verbose_name': 'ECポイント申請',
                'verbose_name_plural': 'ECポイント申請',
                'db_table': 'ec_point_requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('subject', models.CharField(max_length=255)),
                ('body_html', models.TextField()),
                ('body_text', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('available_variables', models.JSONField(blank=True, default=list, help_text='使用可能な変数のリスト')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Gift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('gift_type', models.CharField(choices=[('digital', 'デジタルギフト'), ('coupon', 'クーポン'), ('voucher', 'バウチャー'), ('physical', '現物商品')], default='digital', max_length=20)),
                ('points_required', models.IntegerField()),
                ('original_price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('stock_quantity', models.IntegerField(default=0)),
                ('unlimited_stock', models.BooleanField(default=False)),
                ('image_url', models.URLField(blank=True)),
                ('thumbnail_url', models.URLField(blank=True)),
                ('provider_name', models.CharField(max_length=255)),
                ('provider_url', models.URLField(blank=True)),
                ('status', models.CharField(choices=[('active', '有効'), ('inactive', '無効'), ('sold_out', '売り切れ'), ('discontinued', '販売終了')], default='active', max_length=20)),
                ('available_from', models.DateTimeField(blank=True, null=True)),
                ('available_until', models.DateTimeField(blank=True, null=True)),
                ('usage_instructions', models.TextField(blank=True)),
                ('terms_conditions', models.TextField(blank=True)),
                ('exchange_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GiftCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GiftExchange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_spent', models.IntegerField()),
                ('exchange_code', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('pending', '処理中'), ('completed', '完了'), ('failed', '失敗'), ('cancelled', 'キャンセル'), ('expired', '期限切れ')], default='pending', max_length=20)),
                ('delivery_method', models.CharField(blank=True, max_length=50)),
                ('delivery_address', models.TextField(blank=True)),
                ('recipient_name', models.CharField(blank=True, max_length=255)),
                ('recipient_email', models.EmailField(blank=True, max_length=254)),
                ('recipient_phone', models.CharField(blank=True, max_length=20)),
                ('digital_code', models.CharField(blank=True, max_length=500)),
                ('digital_url', models.URLField(blank=True)),
                ('qr_code_url', models.URLField(blank=True)),
                ('exchanged_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('gift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exchanges', to='core.gift')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gift_exchanges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-exchanged_at'],
            },
        ),
        migrations.CreateModel(
            name='MeltyRankConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('melty_membership_type', models.CharField(choices=[('free', 'MELTY無料会員'), ('premium', 'MELTYプレミアム会員')], max_length=20, unique=True, verbose_name='MELTY会員種別')),
                ('biid_initial_rank', models.CharField(choices=[('bronze', 'ブロンズ'), ('silver', 'シルバー'), ('gold', 'ゴールド'), ('platinum', 'プラチナ'), ('diamond', 'ダイヤモンド')], max_length=20, verbose_name='BIID初期ランク')),
                ('welcome_bonus_points', models.IntegerField(default=1000, verbose_name='ウェルカムボーナスポイント')),
                ('points_expiry_months', models.IntegerField(default=12, verbose_name='ポイント有効期限（月）')),
                ('member_id_prefix', models.CharField(default='S', max_length=5, verbose_name='会員ID接頭辞')),
                ('is_active', models.BooleanField(default=True, verbose_name='有効')),
                ('description', models.TextField(blank=True, verbose_name='説明')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'MELTY会員ランク設定',
                'verbose_name_plural': 'MELTY会員ランク設定',
                'ordering': ['melty_membership_type'],
            },
        ),
        migrations.CreateModel(
            name='MonthlyBilling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('billing_id', models.CharField(max_length=40, unique=True)),
                ('billing_year', models.IntegerField()),
                ('billing_month', models.IntegerField()),
                ('billing_period_start', models.DateField()),
                ('billing_period_end', models.DateField()),
                ('total_points_purchased', models.IntegerField(default=0)),
                ('subtotal', models.IntegerField(default=0)),
                ('tax', models.IntegerField(default=0)),
                ('total_amount', models.IntegerField(default=0)),
                ('deposit_used', models.IntegerField(default=0)),
                ('credit_charged', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('draft', '下書き'), ('finalized', '確定'), ('sent', '送信済み'), ('paid', '支払い済み'), ('overdue', '延滞'), ('cancelled', 'キャンセル')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('finalized_at', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('invoice_pdf_path', models.CharField(blank=True, max_length=500)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['-billing_year', '-billing_month'],
            },
        ),
        migrations.CreateModel(
            name='PaymentTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(max_length=100, unique=True)),
                ('terminal_id', models.CharField(blank=True, max_length=50)),
                ('transaction_type', models.CharField(choices=[('payment', 'Payment'), ('refund', 'Refund'), ('points_grant', 'Points Grant')], default='payment', max_length=20)),
                ('payment_method', models.CharField(choices=[('qr', 'QR Code Payment'), ('nfc', 'NFC Payment'), ('cash', 'Cash Payment'), ('card', 'Credit Card'), ('points', 'Points Payment'), ('deposit', 'Store Deposit')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded'), ('partial_refunded', 'Partial Refunded')], default='pending', max_length=20)),
                ('subtotal', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('points_earned', models.IntegerField(default=0)),
                ('points_used', models.IntegerField(default=0)),
                ('points_balance_before', models.IntegerField(default=0)),
                ('points_balance_after', models.IntegerField(default=0)),
                ('gmopg_order_id', models.CharField(blank=True, max_length=100, null=True)),
                ('gmopg_transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('fincode_payment_id', models.CharField(blank=True, max_length=100, null=True)),
                ('fincode_order_id', models.CharField(blank=True, max_length=100, null=True)),
                ('external_payment_data', models.JSONField(blank=True, default=dict)),
                ('description', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('receipt_number', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('receipt_generated', models.BooleanField(default=False)),
                ('receipt_emailed', models.BooleanField(default=False)),
                ('receipt_email_sent_at', models.DateTimeField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('owner_name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('address', models.TextField()),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('point_rate', models.IntegerField(default=1)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending'), ('suspended', 'Suspended')], default='active', max_length=20)),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('monthly_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('category', models.CharField(choices=[('restaurant', 'Restaurant'), ('retail', 'Retail'), ('service', 'Service'), ('entertainment', 'Entertainment'), ('health', 'Health'), ('education', 'Education')], default='restaurant', max_length=20)),
                ('price_range', models.CharField(choices=[('budget', 'Budget'), ('moderate', 'Moderate'), ('expensive', 'Expensive'), ('luxury', 'Luxury')], default='moderate', max_length=20)),
                ('features', models.JSONField(blank=True, default=list)),
                ('specialties', models.JSONField(blank=True, default=list)),
                ('rating', models.FloatField(default=0.0)),
                ('reviews_count', models.IntegerField(default=0)),
                ('hours', models.CharField(blank=True, max_length=255)),
                ('biid_partner', models.BooleanField(default=True)),
                ('deposit_balance', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('deposit_auto_charge', models.BooleanField(default=False)),
                ('deposit_auto_charge_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='stores', to='core.area')),
            ],
        ),
        migrations.CreateModel(
            name='UserPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField()),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_expired', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_points', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['expiry_date'],
            },
        ),
        migrations.CreateModel(
            name='UserBlogTheme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchased_at', models.DateTimeField(auto_now_add=True)),
                ('theme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.blogtheme')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='blog_theme', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StoreWebhookKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('webhook_key', models.CharField(max_length=64, unique=True, verbose_name='Webhook認証キー')),
                ('allowed_ips', models.JSONField(default=list, verbose_name='許可IPアドレス')),
                ('is_active', models.BooleanField(default=True, verbose_name='有効状態')),
                ('rate_limit_per_minute', models.IntegerField(default=60, verbose_name='分間リクエスト制限')),
                ('last_used_at', models.DateTimeField(blank=True, null=True, verbose_name='最終使用日時')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('store', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='webhook_key', to='core.store', verbose_name='店舗')),
            ],
            options={
                'verbose_name': '店舗Webhookキー',
                'verbose_name_plural': '店舗Webhookキー',
                'db_table': 'store_webhook_keys',
            },
        ),
        migrations.CreateModel(
            name='StoreConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tax_rate', models.DecimalField(decimal_places=2, default=10.0, max_digits=5)),
                ('tax_inclusive', models.BooleanField(default=True)),
                ('receipt_logo_url', models.URLField(blank=True)),
                ('receipt_footer_message', models.TextField(blank=True, default='Thank you for your visit!')),
                ('receipt_template', models.CharField(default='standard', max_length=50)),
                ('gmopg_shop_id', models.CharField(blank=True, max_length=100)),
                ('gmopg_api_key', models.CharField(blank=True, max_length=200)),
                ('payment_timeout_seconds', models.IntegerField(default=300)),
                ('point_rate', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('minimum_payment_for_points', models.DecimalField(decimal_places=2, default=100, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('store', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='configuration', to='core.store')),
            ],
        ),
        migrations.CreateModel(
            name='SecurityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('LOGIN_SUCCESS', 'ログイン成功'), ('LOGIN_FAILURE', 'ログイン失敗'), ('BLOCKED_IP_ACCESS', 'ブロックIPアクセス'), ('RATE_LIMIT_EXCEEDED', 'レート制限超過'), ('ANOMALY_DETECTED', '異常検知'), ('IP_BLOCKED', 'IPブロック'), ('FRAUD_ATTEMPT', '不正試行'), ('ACCOUNT_LOCKED', 'アカウントロック'), ('SUSPICIOUS_ACTIVITY', '不審な活動')], max_length=30)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('request_path', models.CharField(blank=True, max_length=255)),
                ('request_data', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('additional_data', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='RefundRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_to_refund', models.IntegerField()),
                ('refund_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('refund_type', models.CharField(choices=[('cash', '現金払戻し'), ('bank_transfer', '銀行振込'), ('gift_card', 'ギフトカード')], max_length=20)),
                ('status', models.CharField(choices=[('pending', '申請中'), ('reviewing', '審査中'), ('approved', '承認済み'), ('rejected', '却下'), ('completed', '完了'), ('cancelled', 'キャンセル')], default='pending', max_length=20)),
                ('reason', models.TextField()),
                ('bank_name', models.CharField(blank=True, max_length=255)),
                ('branch_name', models.CharField(blank=True, max_length=255)),
                ('account_type', models.CharField(blank=True, max_length=10)),
                ('account_number', models.CharField(blank=True, max_length=20)),
                ('account_holder', models.CharField(blank=True, max_length=255)),
                ('admin_notes', models.TextField(blank=True)),
                ('processing_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_refunds', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refund_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receipt_number', models.CharField(max_length=50, unique=True)),
                ('receipt_data', models.JSONField(default=dict)),
                ('pdf_file_path', models.CharField(blank=True, max_length=500)),
                ('email_recipient', models.EmailField(blank=True, max_length=254, null=True)),
                ('email_sent_at', models.DateTimeField(blank=True, null=True)),
                ('app_delivered_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('generated', 'Generated'), ('emailed', 'Emailed'), ('delivered', 'Delivered'), ('failed', 'Failed')], default='generated', max_length=20)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('transaction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='receipt', to='core.paymenttransaction')),
            ],
            options={
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseID',
            fields=[
                ('id', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('prices', models.JSONField(default=list)),
                ('name', models.CharField(max_length=255)),
                ('issuer', models.CharField(max_length=255)),
                ('is_strict', models.BooleanField(default=True)),
                ('color_main', models.CharField(blank=True, max_length=6)),
                ('color_sub', models.CharField(blank=True, max_length=6)),
                ('face_image_url', models.URLField(blank=True)),
                ('header_image_url', models.URLField(blank=True)),
                ('video_url', models.URLField(blank=True)),
                ('video_play_time', models.IntegerField(default=0)),
                ('ad_image_url', models.URLField(blank=True)),
                ('ad_redirect_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('access_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.apiaccesskey')),
                ('brands', models.ManyToManyField(related_name='purchase_ids', to='core.brand')),
            ],
        ),
        migrations.CreateModel(
            name='PromotionMail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('target_user_rank', models.CharField(blank=True, choices=[('bronze', 'ブロンズ'), ('silver', 'シルバー'), ('gold', 'ゴールド'), ('platinum', 'プラチナ'), ('diamond', 'ダイヤモンド')], max_length=20, null=True)),
                ('send_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('recipients_count', models.IntegerField(default=0)),
                ('sent_count', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('draft', '下書き'), ('pending', '送信待ち'), ('sending', '送信中'), ('sent', '送信完了'), ('failed', '送信失敗')], default='draft', max_length=20)),
                ('scheduled_at', models.DateTimeField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promotion_mails', to='core.store')),
                ('target_area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='promotion_mails', to='core.area')),
            ],
        ),
        migrations.CreateModel(
            name='PointTransfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField()),
                ('status', models.CharField(choices=[('pending', '処理中'), ('completed', '完了'), ('failed', '失敗'), ('cancelled', 'キャンセル')], default='pending', max_length=20)),
                ('message', models.TextField(blank=True)),
                ('transfer_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_transfers', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_transfers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PointTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField()),
                ('transaction_type', models.CharField(choices=[('grant', 'ポイント付与'), ('payment', 'ポイント決済'), ('refund', 'ポイント返金'), ('transfer_in', 'ポイント受取'), ('transfer_out', 'ポイント送付'), ('expire', 'ポイント失効'), ('bonus', 'ボーナスポイント'), ('correction', '調整')], max_length=20)),
                ('description', models.CharField(blank=True, max_length=500)),
                ('balance_before', models.PositiveIntegerField(default=0)),
                ('balance_after', models.PositiveIntegerField(default=0)),
                ('reference_id', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_transactions', to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.store')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PointPurchaseTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(max_length=40, unique=True)),
                ('points_amount', models.IntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, default=1.08, max_digits=10)),
                ('subtotal', models.IntegerField()),
                ('tax', models.IntegerField()),
                ('total_amount', models.IntegerField()),
                ('payment_method', models.CharField(choices=[('credit_card', 'クレジットカード'), ('deposit', 'デポジット')], max_length=20)),
                ('payment_status', models.CharField(choices=[('pending', '処理中'), ('success', '成功'), ('failed_card', 'カード決済失敗'), ('failed_deposit', 'デポジット不足'), ('refunded', '返金済み')], default='pending', max_length=20)),
                ('card_payment_id', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('deposit_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.deposittransaction')),
                ('monthly_billing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.monthlybilling')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_purchases', to='core.store')),
                ('target_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_purchases_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PointAwardLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('awarded_points', models.IntegerField(verbose_name='付与ポイント')),
                ('award_rate', models.DecimalField(decimal_places=4, max_digits=8, verbose_name='付与率')),
                ('processing_duration_ms', models.IntegerField(blank=True, null=True, verbose_name='処理時間(ms)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('ec_request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='award_log', to='core.ecpointrequest', verbose_name='EC申請')),
                ('point_transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.pointtransaction', verbose_name='ポイント取引')),
            ],
            options={
                'verbose_name': 'ポイント付与ログ',
                'verbose_name_plural': 'ポイント付与ログ',
                'db_table': 'point_award_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentTransactionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(max_length=200)),
                ('item_code', models.CharField(blank=True, max_length=100)),
                ('category', models.CharField(blank=True, max_length=100)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('quantity', models.IntegerField(default=1)),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tax_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.paymenttransaction')),
            ],
        ),
        migrations.AddField(
            model_name='paymenttransaction',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_transactions', to='core.store'),
        ),
        migrations.CreateModel(
            name='PaymentLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('debug', 'Debug'), ('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], default='info', max_length=10)),
                ('message', models.TextField()),
                ('details', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='core.paymenttransaction')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('point_received', 'ポイント受取'), ('point_transfer', 'ポイント転送'), ('gift_exchange', 'ギフト交換'), ('store_registration', '店舗登録'), ('store_approval', '店舗承認'), ('store_rejection', '店舗却下'), ('promotion', 'プロモーション'), ('system', 'システム通知'), ('welcome', 'ウェルカム'), ('admin_alert', '管理者アラート')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('is_sent', models.BooleanField(default=False)),
                ('email_sent', models.BooleanField(default=False)),
                ('email_sent_at', models.DateTimeField(blank=True, null=True)),
                ('email_error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('email_template', models.CharField(blank=True, max_length=100)),
                ('email_context', models.JSONField(blank=True, default=dict)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='monthlybilling',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monthly_billings', to='core.store'),
        ),
        migrations.CreateModel(
            name='GiftPurchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.CharField(max_length=40, unique=True)),
                ('gift_code', models.CharField(max_length=50, unique=True)),
                ('gift_url', models.URLField()),
                ('price', models.IntegerField()),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('commission', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('commission_tax', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('currency', models.CharField(default='JPY', max_length=3)),
                ('status', models.CharField(choices=[('pending', '処理中'), ('completed', '完了'), ('failed', '失敗'), ('expired', '期限切れ')], default='pending', max_length=20)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('gift_exchange', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.giftexchange')),
                ('purchase_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.purchaseid')),
            ],
        ),
        migrations.AddField(
            model_name='gift',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gifts', to='core.giftcategory'),
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=255)),
                ('template_used', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('pending', '送信待ち'), ('sent', '送信完了'), ('failed', '送信失敗'), ('bounced', 'バウンス'), ('spam', 'スパム')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('provider_message_id', models.CharField(blank=True, max_length=255)),
                ('bounce_reason', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notification', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.notification')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='ecpointrequest',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.store', verbose_name='店舗'),
        ),
        migrations.AddField(
            model_name='ecpointrequest',
            name='store_approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_ec_requests', to=settings.AUTH_USER_MODEL, verbose_name='店舗承認者'),
        ),
        migrations.AddField(
            model_name='ecpointrequest',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='申請者'),
        ),
        migrations.CreateModel(
            name='DuplicateDetection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detection_type', models.CharField(choices=[('order_id', '注文ID重複'), ('pattern_match', 'パターンマッチ'), ('suspicious', '不審な活動')], max_length=20, verbose_name='検知種別')),
                ('detection_details', models.JSONField(default=dict, verbose_name='検知詳細')),
                ('severity', models.CharField(choices=[('low', '低'), ('medium', '中'), ('high', '高'), ('critical', '重大')], max_length=20, verbose_name='重要度')),
                ('is_resolved', models.BooleanField(default=False, verbose_name='解決済み')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='解決日時')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='検知日時')),
                ('duplicate_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_detections_as_duplicate', to='core.ecpointrequest', verbose_name='重複申請')),
                ('original_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_detections_as_original', to='core.ecpointrequest', verbose_name='元申請')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='解決者')),
            ],
            options={
                'verbose_name': '重複検知',
                'verbose_name_plural': '重複検知',
                'db_table': 'duplicate_detections',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DigitalGiftUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('used_amount', models.IntegerField()),
                ('exchange_brand', models.CharField(max_length=50)),
                ('exchange_reference', models.CharField(blank=True, max_length=255)),
                ('user_agent', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('used_at', models.DateTimeField(auto_now_add=True)),
                ('gift_purchase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='core.digitalgiftpurchase')),
            ],
            options={
                'ordering': ['-used_at'],
            },
        ),
        migrations.CreateModel(
            name='DigitalGiftPurchaseID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_id', models.CharField(max_length=40, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('issuer', models.CharField(max_length=255)),
                ('prices', models.JSONField(default=list)),
                ('is_strict', models.BooleanField(default=True)),
                ('main_color', models.CharField(blank=True, max_length=7)),
                ('sub_color', models.CharField(blank=True, max_length=7)),
                ('face_image_url', models.URLField(blank=True)),
                ('header_image_url', models.URLField(blank=True)),
                ('youtube_url', models.URLField(blank=True)),
                ('minimum_play_time', models.IntegerField(default=0)),
                ('ad_image_url', models.URLField(blank=True)),
                ('redirect_url', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brands', models.ManyToManyField(to='core.digitalgiftbrand')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='digitalgiftpurchase',
            name='purchase_id_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to='core.digitalgiftpurchaseid'),
        ),
        migrations.AddField(
            model_name='digitalgiftpurchase',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='digital_gift_purchases', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DepositUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('used_for', models.CharField(help_text='使用目的（プロモーション、広告費など）', max_length=100)),
                ('used_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('user_count', models.IntegerField(default=0, help_text='対象ユーザー数')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('related_promotion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.promotionmail')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deposit_usage_logs', to='core.store')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='core.deposittransaction')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='deposittransaction',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deposit_transactions', to='core.store'),
        ),
        migrations.CreateModel(
            name='DepositAutoChargeRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=False)),
                ('trigger_amount', models.DecimalField(decimal_places=2, help_text='この金額を下回ったら自動チャージ', max_digits=10)),
                ('charge_amount', models.DecimalField(decimal_places=2, help_text='チャージする金額', max_digits=10)),
                ('payment_method', models.CharField(choices=[('credit_card', 'クレジットカード'), ('bank_transfer', '銀行振込'), ('convenience_store', 'コンビニ決済'), ('digital_wallet', 'デジタルウォレット'), ('system', 'システム処理')], max_length=20)),
                ('payment_reference', models.CharField(blank=True, help_text='カード番号（下4桁）など', max_length=255)),
                ('max_charge_per_day', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('max_charge_per_month', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('notification_enabled', models.BooleanField(default=True)),
                ('notification_email', models.EmailField(blank=True, max_length=254)),
                ('last_triggered_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('store', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='auto_charge_rule', to='core.store')),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('CREATE', '作成'), ('UPDATE', '更新'), ('DELETE', '削除'), ('ACCESS', 'アクセス'), ('EXPORT', 'エクスポート'), ('IMPORT', 'インポート'), ('ADMIN_ACTION', '管理者アクション')], max_length=20)),
                ('object_type', models.CharField(max_length=50)),
                ('object_id', models.CharField(blank=True, max_length=100)),
                ('changes', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='APIRateLimit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('request_count', models.IntegerField(default=0)),
                ('window_start', models.DateTimeField()),
                ('access_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.apiaccesskey')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='store',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='managers', to='core.store'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='securitylog',
            index=models.Index(fields=['event_type', 'timestamp'], name='core_securi_event_t_195db6_idx'),
        ),
        migrations.AddIndex(
            model_name='securitylog',
            index=models.Index(fields=['ip_address', 'timestamp'], name='core_securi_ip_addr_7d786f_idx'),
        ),
        migrations.AddIndex(
            model_name='securitylog',
            index=models.Index(fields=['user', 'timestamp'], name='core_securi_user_id_9621f9_idx'),
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['user', 'created_at'], name='core_pointt_user_id_c9b391_idx'),
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['store', 'created_at'], name='core_pointt_store_i_a650d2_idx'),
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['transaction_type', 'created_at'], name='core_pointt_transac_461766_idx'),
        ),
        migrations.AddIndex(
            model_name='pointpurchasetransaction',
            index=models.Index(fields=['store', 'payment_status'], name='core_pointp_store_i_fa6b7f_idx'),
        ),
        migrations.AddIndex(
            model_name='pointpurchasetransaction',
            index=models.Index(fields=['target_user', 'created_at'], name='core_pointp_target__0f328c_idx'),
        ),
        migrations.AddIndex(
            model_name='pointpurchasetransaction',
            index=models.Index(fields=['transaction_id'], name='core_pointp_transac_cd9615_idx'),
        ),
        migrations.AddIndex(
            model_name='pointpurchasetransaction',
            index=models.Index(fields=['monthly_billing'], name='core_pointp_monthly_d7783e_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['customer', '-created_at'], name='core_paymen_custome_633167_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['store', '-created_at'], name='core_paymen_store_i_d4aa8e_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['status', 'created_at'], name='core_paymen_status_6e8805_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['transaction_id'], name='core_paymen_transac_6acb4b_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['gmopg_order_id'], name='core_paymen_gmopg_o_0b7eb9_idx'),
        ),
        migrations.AddIndex(
            model_name='paymenttransaction',
            index=models.Index(fields=['fincode_payment_id'], name='core_paymen_fincode_5d628c_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type', 'created_at'], name='core_notifi_notific_d4d13f_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'is_read'], name='core_notifi_user_id_cb8f07_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['email_sent', 'created_at'], name='core_notifi_email_s_57ee2c_idx'),
        ),
        migrations.AddIndex(
            model_name='monthlybilling',
            index=models.Index(fields=['store', 'billing_year', 'billing_month'], name='core_monthl_store_i_703d5f_idx'),
        ),
        migrations.AddIndex(
            model_name='monthlybilling',
            index=models.Index(fields=['status', 'due_date'], name='core_monthl_status_cb1d96_idx'),
        ),
        migrations.AddIndex(
            model_name='monthlybilling',
            index=models.Index(fields=['billing_id'], name='core_monthl_billing_1dd50e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='monthlybilling',
            unique_together={('store', 'billing_year', 'billing_month')},
        ),
        migrations.AddIndex(
            model_name='emaillog',
            index=models.Index(fields=['status', 'created_at'], name='core_emaill_status_45c927_idx'),
        ),
        migrations.AddIndex(
            model_name='emaillog',
            index=models.Index(fields=['recipient_email', 'sent_at'], name='core_emaill_recipie_879d11_idx'),
        ),
        migrations.AddIndex(
            model_name='ecpointrequest',
            index=models.Index(fields=['status', 'created_at'], name='ec_point_re_status_73949b_idx'),
        ),
        migrations.AddIndex(
            model_name='ecpointrequest',
            index=models.Index(fields=['store', 'status'], name='ec_point_re_store_i_c98c55_idx'),
        ),
        migrations.AddIndex(
            model_name='ecpointrequest',
            index=models.Index(fields=['user', 'created_at'], name='ec_point_re_user_id_ab3e88_idx'),
        ),
        migrations.AddIndex(
            model_name='ecpointrequest',
            index=models.Index(fields=['order_id'], name='ec_point_re_order_i_6dcec7_idx'),
        ),
        migrations.AddIndex(
            model_name='ecpointrequest',
            index=models.Index(fields=['request_hash'], name='ec_point_re_request_68bf09_idx'),
        ),
        migrations.AddIndex(
            model_name='digitalgiftpurchase',
            index=models.Index(fields=['user', 'status'], name='core_digita_user_id_f9d749_idx'),
        ),
        migrations.AddIndex(
            model_name='digitalgiftpurchase',
            index=models.Index(fields=['status', 'expire_at'], name='core_digita_status_718a24_idx'),
        ),
        migrations.AddIndex(
            model_name='digitalgiftpurchase',
            index=models.Index(fields=['gift_code'], name='core_digita_gift_co_9eb1eb_idx'),
        ),
        migrations.AddIndex(
            model_name='deposittransaction',
            index=models.Index(fields=['store', 'created_at'], name='core_deposi_store_i_ecbe31_idx'),
        ),
        migrations.AddIndex(
            model_name='deposittransaction',
            index=models.Index(fields=['transaction_type', 'status'], name='core_deposi_transac_9bd611_idx'),
        ),
        migrations.AddIndex(
            model_name='deposittransaction',
            index=models.Index(fields=['status', 'created_at'], name='core_deposi_status_7bdb24_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user', 'timestamp'], name='core_auditl_user_id_7b678c_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action_type', 'timestamp'], name='core_auditl_action__64f4df_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['object_type', 'timestamp'], name='core_auditl_object__49c4a9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='apiratelimit',
            unique_together={('access_key', 'ip_address')},
        ),
    ]
