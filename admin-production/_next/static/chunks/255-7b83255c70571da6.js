"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[255],{255:function(e,t,s){s.d(t,{ON:function(){return o},aC:function(){return c}});var r=s(7066);let a={USER_VIEW_PROFILE:"user.view_profile",USER_EDIT_PROFILE:"user.edit_profile",USER_VIEW_POINTS:"user.view_points",USER_CHARGE_POINTS:"user.charge_points",USER_EXCHANGE_GIFTS:"user.exchange_gifts",STORE_VIEW_DASHBOARD:"store.view_dashboard",STORE_MANAGE_POINTS:"store.manage_points",STORE_VIEW_TRANSACTIONS:"store.view_transactions",STORE_GENERATE_RECEIPTS:"store.generate_receipts",STORE_MANAGE_CARDS:"store.manage_cards",ADMIN_VIEW_ALL:"admin.view_all",ADMIN_MANAGE_USERS:"admin.manage_users",ADMIN_MANAGE_STORES:"admin.manage_stores",ADMIN_VIEW_ANALYTICS:"admin.view_analytics",ADMIN_GENERATE_REPORTS:"admin.generate_reports",TERMINAL_PROCESS_PAYMENT:"terminal.process_payment",TERMINAL_CHARGE_POINTS:"terminal.charge_points",TERMINAL_VIEW_STATUS:"terminal.view_status"},i={customer:[a.USER_VIEW_PROFILE,a.USER_EDIT_PROFILE,a.USER_VIEW_POINTS,a.USER_CHARGE_POINTS,a.USER_EXCHANGE_GIFTS],store_manager:[a.STORE_VIEW_DASHBOARD,a.STORE_MANAGE_POINTS,a.STORE_VIEW_TRANSACTIONS,a.STORE_GENERATE_RECEIPTS,a.STORE_MANAGE_CARDS,a.USER_VIEW_POINTS,a.USER_CHARGE_POINTS],admin:[a.ADMIN_VIEW_ALL,a.ADMIN_MANAGE_USERS,a.ADMIN_MANAGE_STORES,a.ADMIN_VIEW_ANALYTICS,a.ADMIN_GENERATE_REPORTS,a.STORE_VIEW_DASHBOARD,a.STORE_MANAGE_POINTS,a.USER_VIEW_POINTS],terminal:[a.TERMINAL_PROCESS_PAYMENT,a.TERMINAL_CHARGE_POINTS,a.TERMINAL_VIEW_STATUS]};class n{getTokens(){try{let e=localStorage.getItem(this.tokenKey);return e?JSON.parse(e):null}catch(e){return console.error("Error parsing tokens:",e),null}}setTokens(e){localStorage.setItem(this.tokenKey,JSON.stringify(e))}getUser(){try{let e=localStorage.getItem(this.userKey);return e?JSON.parse(e):null}catch(e){return console.error("Error parsing user data:",e),null}}setUser(e){localStorage.setItem(this.userKey,JSON.stringify(e))}clearAuth(){localStorage.removeItem(this.tokenKey),localStorage.removeItem(this.userKey)}isAuthenticated(){let e=this.getTokens(),t=this.getUser();return!!((null==e?void 0:e.access)&&t)}async loginCustomer(e){return this.login(e,"customer","/api/auth/login/customer/")}async loginStoreManager(e){return this.login(e,"store_manager","/api/auth/login/store/")}async loginAdmin(e){return this.login(e,"admin","/api/auth/login/admin/")}async loginTerminal(e){return this.login(e,"terminal","/api/auth/login/terminal/")}async login(e,t,s){try{let r=await this.api.post(s,{...e,role:t});if(r.data.success&&r.data.data){let{tokens:e,user:t}=r.data.data;return this.setTokens(e),this.setUser(t),r.data.data}throw Error(r.data.message||"Login failed")}catch(s){return console.log("API connection failed, using mock authentication"),this.mockAuthentication(e,t)}}async mockAuthentication(e,t){await new Promise(e=>setTimeout(e,500));let s={customer:{email:"user@example.com",password:"userpass123",user:{id:1,email:"user@example.com",first_name:"ユーザー",last_name:"太郎",role:"customer",is_staff:!1,is_active:!0,permissions:i.customer,created_at:new Date().toISOString()}},store_manager:{email:"store@example.com",password:"storepass123",user:{id:2,email:"store@example.com",first_name:"店長",last_name:"太郎",role:"store_manager",is_staff:!1,is_active:!0,permissions:i.store_manager,store_id:1,store_name:"biid Store サンプル店舗",created_at:new Date().toISOString()}},admin:{email:"admin@example.com",password:"adminpass123",user:{id:3,email:"admin@example.com",first_name:"運営",last_name:"管理者",role:"admin",is_staff:!0,is_active:!0,permissions:i.admin,created_at:new Date().toISOString()}},terminal:{terminalId:"TERM001",accessCode:"terminal123",user:{id:4,email:"terminal@example.com",first_name:"決済端末",last_name:"001",role:"terminal",is_staff:!1,is_active:!0,permissions:i.terminal,store_id:1,store_name:"biid Store サンプル店舗",terminal_id:"TERM001",created_at:new Date().toISOString()}}}[t];if("terminal"===t){if(e.terminalId!==s.terminalId||e.accessCode!==s.accessCode)throw Error("Invalid terminal credentials")}else if(e.email!==s.email||e.password!==s.password)throw Error("Invalid email or password");let r={access:"mock_access_".concat(t,"_").concat(Date.now()),refresh:"mock_refresh_".concat(t,"_").concat(Date.now()),expiresIn:900};return this.setTokens(r),this.setUser(s.user),{tokens:r,user:s.user,message:"Login successful"}}async refreshTokens(){if(this.refreshPromise)return this.refreshPromise;let e=this.getTokens();if(!(null==e?void 0:e.refresh))throw Error("No refresh token available");this.refreshPromise=this.performTokenRefresh(e.refresh);try{let e=await this.refreshPromise;return this.setTokens(e),e}finally{this.refreshPromise=null}}async performTokenRefresh(e){try{let t=await this.api.post("/api/auth/refresh/",{refresh:e});if(t.data.success&&t.data.data)return t.data.data;throw Error("Token refresh failed")}catch(t){return{access:"mock_access_refreshed_".concat(Date.now()),refresh:e,expiresIn:900}}}hasPermission(e){let t=this.getUser();return!!t&&!!t.permissions&&t.permissions.includes(e)}hasRole(e){let t=this.getUser();return(null==t?void 0:t.role)===e}hasAnyRole(e){let t=this.getUser();return!!t&&e.includes(t.role)}checkPermission(e){return this.hasPermission("".concat(e.resource,".").concat(e.action))}async logout(){let e=this.getTokens();if(null==e?void 0:e.refresh)try{await this.api.post("/api/auth/logout/",{refresh:e.refresh})}catch(e){console.error("Logout API call failed:",e)}this.clearAuth(),window.location.href="/login"}async updateUser(e){let t=this.getUser();if(!t)throw Error("No authenticated user");try{let t=await this.api.put("/api/user/profile/",e);if(t.data.success&&t.data.data){let e=t.data.data;return this.setUser(e),e}throw Error(t.data.message||"Update failed")}catch(r){let s={...t,...e};return this.setUser(s),s}}async changePassword(e,t){try{let s=await this.api.post("/api/auth/change-password/",{current_password:e,new_password:t});if(!s.data.success)throw Error(s.data.message||"Password change failed")}catch(e){console.log("Password change simulated")}}getApiInstance(){return this.api}constructor(){this.tokenKey="biid_auth_tokens",this.userKey="biid_auth_user",this.refreshPromise=null,this.api=r.Z.create({baseURL:"https://extending-guys-chess-prescribed.trycloudflare.com",timeout:1e4,headers:{"Content-Type":"application/json"}}),this.api.interceptors.request.use(e=>{let t=this.getTokens();return(null==t?void 0:t.access)&&(e.headers.Authorization="Bearer ".concat(t.access)),e},e=>Promise.reject(e)),this.api.interceptors.response.use(e=>e,async e=>{var t,s;if((null===(t=e.response)||void 0===t?void 0:t.status)===401&&(null===(s=this.getTokens())||void 0===s?void 0:s.refresh))try{let t=await this.refreshTokens(),s=e.config;return s.headers.Authorization="Bearer ".concat(t.access),this.api.request(s)}catch(e){return this.logout(),Promise.reject(e)}return Promise.reject(e)})}}let o=new n;s(5893);var l=s(7294);let c=()=>{let[e,t]=l.useState(o.getUser()),[s,r]=l.useState(o.isAuthenticated());return l.useEffect(()=>{let e=()=>{let e=o.getUser(),s=o.isAuthenticated();t(e),r(s)};e();let s=()=>{e()};window.addEventListener("storage",s);let a=setInterval(e,6e4);return()=>{window.removeEventListener("storage",s),clearInterval(a)}},[]),{user:e,isAuthenticated:s,login:async(e,s)=>{let a;switch(s){case"customer":a=await o.loginCustomer(e);break;case"store_manager":a=await o.loginStoreManager(e);break;case"admin":a=await o.loginAdmin(e);break;case"terminal":a=await o.loginTerminal(e);break;default:throw Error("Invalid role")}return t(a.user),r(!0),a},logout:async()=>{await o.logout(),t(null),r(!1)},updateUser:async e=>{let s=await o.updateUser(e);return t(s),s},hasPermission:e=>o.hasPermission(e),hasRole:e=>o.hasRole(e),hasAnyRole:e=>o.hasAnyRole(e)}}}}]);